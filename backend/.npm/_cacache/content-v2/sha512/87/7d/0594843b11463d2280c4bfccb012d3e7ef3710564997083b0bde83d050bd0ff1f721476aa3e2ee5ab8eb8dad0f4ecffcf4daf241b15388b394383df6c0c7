{"_id":"node-jwk","_rev":"2-0c474503702e14b84fbea034fff687f1","name":"node-jwk","description":"JWK support","dist-tags":{"latest":"0.1.0"},"versions":{"0.1.0":{"name":"node-jwk","version":"0.1.0","description":"JWK support","scripts":{"test":"echo \"Error: no test specified\" && exit 1","lint":"eslint . --ext .js || exit 0"},"author":{"name":"Frank Schmid","email":"fschmid740@googlemail.com"},"license":"Artistic-2.0","repository":{"type":"git","url":"git+https://github.com/HyperBrain/node-jwk.git"},"engines":{"node":">=4.3.1"},"keywords":["jwk","jws","jwt","jwkset","security","token","convert","parse"],"bugs":{"url":"https://github.com/HyperBrain/node-jwk/issues"},"dependencies":{"asn1.js":"^4.9.1","base64url":"^2.0.0","lodash":"^4.17.4"},"devDependencies":{"chai":"^3.5.0","eslint":"^3.17.1","eslint-plugin-lodash":"^2.3.5","eslint-plugin-mocha":"^4.8.0","eslint-plugin-promise":"^3.5.0","mocha":"^3.2.0"},"gitHead":"12eb2cb1c93debe9e9f348eec57966392d5e18bc","homepage":"https://github.com/HyperBrain/node-jwk#readme","_id":"node-jwk@0.1.0","_shasum":"d3e8e0b1a2a5b04e2c780d26410e0dabfa0ff337","_from":".","_npmVersion":"2.14.12","_nodeVersion":"4.3.1","_npmUser":{"name":"hyperbrain","email":"fschmid740@googlemail.com"},"dist":{"shasum":"d3e8e0b1a2a5b04e2c780d26410e0dabfa0ff337","tarball":"https://registry.npmjs.org/node-jwk/-/node-jwk-0.1.0.tgz","integrity":"sha512-6gAFKZ9/v/ulIR/QIcgf1TLFG0lB9LrHTAkuRVbT9HKRwYntbbuc52h2BJatut1AJ/sVeRmFKfj7A5BGjn2dHw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBe17WrrL4bnb7nJ0aPrnVgZ2mmi/8rn/RTxsHvidC9PAiAMd5Ux1w9nhK5wkT9n11QAkdcgJvSmiq91d5aLeaf97w=="}]},"maintainers":[{"name":"hyperbrain","email":"fschmid740@googlemail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/node-jwk-0.1.0.tgz_1489692387685_0.4163706758990884"}}},"readme":"# node-jwk\n\nImplementation of RFC-7517 (JSON Web Key) compliant key handling.\n\nThe module can be used to convert keys into buffers or other formats to\nenable the direct use of JWK formatted keys with other node modules like\n[njwt](https://www.npmjs.com/package/njwt) and others.\n\n## Usage\n\nThe module offers the classes `JWK` and `JWKSet` to work with JWK encoded keys\nor key sets.\n\nYou can instantiate either of the objects from a stringified JSON or an object.\n```\nconst njwk = require('node-jwk');\n\nconst myKey = njwk.JWK.fromJSON(myJSONString);\nconst myKeySet = njwk.JWKSet.fromObject(myKeySet);\n```\n\n### Keysets (JWKSet)\n\nKeysets can contain a number of different keys which are unique by their _kid_.\n\n#### JWKSet.findKeyById(kid)\n\nThe JWKSet class offers the `findKeyById` method that will let you grab a key\nby its id and returns it wrapped in a JWK object.\n\n#### JWKSet.findKeysByUse(use)\n\nThere might be cases where you want to use a key designated for encoding/decoding or\nsigning/verification. With `findKeysByUse` you can retrieve an array of all\ncontained keys that match the use given.\n\nBut remember that the use property is specified as OPTIONAL, so is the content of\nit. Be prepared that keys you get from 3rd party could miss it.\n\n#### JWKSet.keys\n\nReturns all keys as an array of JWK objects.\n\n#### JWKSet.fromObject(object) JWKSet.fromJSON(string)\n\nFactory to instantiate JWKSet objects. This method will throw on invalid\nkeysets (the keyset structure or invalid JSON). According to the specification\n(RFC) invalid keys contained in a valid set are ignored.\n\n\n### Keys (JWK)\n\nAll standard JWK properties are exposed by the JWK object. Be aware that per\nspecification all properties but `kty` and `kid` are optional. Here's a list:\n```\n\tkid\n\tkty\n\tuse\n\tkey_ops\n\talg\n```\n\n#### JWK.key\n\nThrough the key property you can access the key algorithm specific functionality.\n\n##### JWK.key.hasPrivateKey\n\nReturns true if the key contains a private key part.\n\n##### JWK.key.toPublicKeyPEM() => String\n\nGenerates a PEM that contains the public key of the JWK. This can be used\ndirectly as key in OpenSSL or other node modules and works for EC as well as\nRSA keys.\n\n##### JWK.key.toPrivateKeyPEM() => String\n\nGenerates a PEM that contains the private key of the JWK. This can be used\ndirectly as key in OpenSSL or other node modules and works for EC as well as\nRSA keys.\n\n#### JWK.fromObject(object) JWK.fromJSON(string)\n\nFactory to instantiate JWK objects. This method will throw on invalid\nkeys (the keyset structure or invalid JSON).\nNormally you should use keysets to manage your keys instead of single keys.\n\n\n## Examples\n\n### Creating a signed token with node-jwk and njwt\n\nThe example uses bluebird promises to be able to catch exceptions thrown in the\nkey retrieval and lodash for convenience.\n\n```\nconst time = Math.floor(_.now() / 1000);\n\nconst claims = {\n\tiss: 'itsME',\n\taud: 'myAudience',\n\tiat: time,\n\texp: time + 3600\n};\n\nreturn BbPromise.try(() => {\n\tconst keySet = nodeJWK.JWKSet.fromObject(myPrivateKeySet);\n\tconst jwk = keySet.findKeyById(myKeyId);\n\n\tif (!jwk) {\n\t\treturn BbPromise.reject(new Error('Huh, my key is not there...'));\n\t}\n\n\tconst keyPEM = jwk.key.toPrivateKeyPEM();\n\tconst jwt = njwt.create(claims, keyPEM, jwk.alg);\n\n\treturn BbPromise.resolve(jwt.compact());\n})\n.catch(err => {\n\treturn BbPromise.reject(err);\n});\n```\n\n## Supported key types\n\nRSA, EC, oct\n\nAll keys but binary (oct) keys can be converted into PEM format for their\npublic and private keys.\n\n## References\n\n[RFC-7517 JSON Web Key](https://tools.ietf.org/html/rfc7517)\n\n[RFC-7518 JSON Web Algorithms](https://tools.ietf.org/html/rfc7518)\n","maintainers":[{"name":"hyperbrain","email":"fschmid740@googlemail.com"}],"time":{"modified":"2022-06-21T16:12:21.749Z","created":"2017-03-16T19:26:29.628Z","0.1.0":"2017-03-16T19:26:29.628Z"},"homepage":"https://github.com/HyperBrain/node-jwk#readme","keywords":["jwk","jws","jwt","jwkset","security","token","convert","parse"],"repository":{"type":"git","url":"git+https://github.com/HyperBrain/node-jwk.git"},"author":{"name":"Frank Schmid","email":"fschmid740@googlemail.com"},"bugs":{"url":"https://github.com/HyperBrain/node-jwk/issues"},"license":"Artistic-2.0","readmeFilename":"README.md"}